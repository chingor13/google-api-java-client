/*
 * Copyright 2013 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package com.google.api.client.googleapis.util;

import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.JsonParser;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.Beta;
import com.google.api.client.util.SecurityUtils;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.AccessControlException;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.util.List;

/**
 * {@link Beta} <br/>
 * Utility class for the Google API Client Library.
 *
 * @since 1.19
 */
@Beta
public final class Utils {
  private static final String CONTEXT_AWARE_METADATA_PATH =
      System.getProperty("user.home") + "/.secureConnect/context_aware_metadata.json";

  /** GOOGLE_API_USE_CLIENT_CERTIFICATE environment variable */
  public static final String GOOGLE_API_USE_CLIENT_CERTIFICATE =
      "GOOGLE_API_USE_CLIENT_CERTIFICATE";

  /** Returns a cached default implementation of the JsonFactory interface. */
  public static JsonFactory getDefaultJsonFactory() {
    return JsonFactoryInstanceHolder.INSTANCE;
  }

  private static class JsonFactoryInstanceHolder {
    // The jackson2.JacksonFactory was introduced as a product dependency in 1.19 to enable
    // other APIs to not require one of these for input. This was the most commonly used
    // implementation in public samples. This is a compile-time dependency to help detect the
    // dependency as early as possible.
    static final JsonFactory INSTANCE = new JacksonFactory();
  }

  /** Returns a cached default implementation of the HttpTransport interface. */
  public static HttpTransport getDefaultTransport() {
    return TransportInstanceHolder.INSTANCE;
  }

  private static class TransportInstanceHolder {
    static final HttpTransport INSTANCE = new NetHttpTransport();
  }

  /**
   * Returns the `cert_provider_command` field in context_aware_metadata.json file.
   *
   * @param contextAwareMetadata Input stream for ~/.secureConnect/context_aware_metadata.json file.
   * @return `cert_provider_command` field
   * @since 1.31
   */
  static List<String> extractCertificateProviderCommand(InputStream contextAwareMetadata)
      throws IOException {
    JsonParser parser = JsonFactoryInstanceHolder.INSTANCE.createJsonParser(contextAwareMetadata);
    ContextAwareMetadataJson json = parser.parse(ContextAwareMetadataJson.class);
    return json.getCommands();
  }

  /**
   * Returns if mTLS client certificate should be used. mTLS client certificate is used if and only
   * if "GOOGLE_API_USE_CLIENT_CERTIFICATE" environment variable value is "true".
   *
   * @return If mTLS client certificate should be used
   * @since 1.31
   */
  public static Boolean useMtlsClientCertificate() {
    String useClientCertificate = System.getenv(GOOGLE_API_USE_CLIENT_CERTIFICATE);
    return "true".equals(useClientCertificate);
  }

  /**
   * Returns the default KeyStore for mutual TLS.
   *
   * <p>Default client certificate can be generated by running the commands in
   * ~/.secureConnect/context_aware_metadata.json file. If this json exists, and the default client
   * certificate exists, this function returns a KeyStore object created with the default client
   * certificate and the key store password is "". Otherwise, null will be returned.
   *
   * @return KeyStore for mutual TLS.
   * @since 1.31
   */
  public static KeyStore loadDefaultMtlsKeyStore() throws IOException, GeneralSecurityException {
    File file = new File(CONTEXT_AWARE_METADATA_PATH);
    if (!file.exists()) {
      return null;
    }

    // Load the cert provider command from the json file.
    InputStream stream = new FileInputStream(file);
    List<String> command = extractCertificateProviderCommand(stream);

    // Call the command.
    Process process = new ProcessBuilder(command).start();
    int exitCode = 0;
    try {
      exitCode = process.waitFor();
    } catch (InterruptedException exception) {
      throw new AccessControlException(exception.toString());
    }
    if (exitCode != 0) {
      throw new AccessControlException("Failed to execute cert provider command");
    }

    InputStream certificateToUse = process.getInputStream();
    return SecurityUtils.createMtlsKeyStore(certificateToUse);
  }

  private Utils() {}
}
